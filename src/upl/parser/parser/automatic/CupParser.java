
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package upl.parser.parser.automatic;

import java_cup.runtime.*;
import upl.lexer.Lexer;
import upl.lexer.Token;
import upl.lexer.TokenType;
import upl.parser.general.expression.*;
import upl.parser.general.statement.*;
import upl.parser.parser.automatic.MyComplexSymbolFactory;
import upl.parser.parser.automatic.MyComplexSymbol;
import upl.parser.visualize.TextBox;
import java.io.InputStreamReader;
import java.util.List;
import java.util.ArrayList;
import java.util.Map.Entry;
import java.util.AbstractMap.SimpleEntry;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CupParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CupParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CupParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CupParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CupParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\041\003\000\002\041" +
    "\003\000\002\042\003\000\002\042\003\000\002\043\003" +
    "\000\002\043\003\000\002\044\003\000\002\044\003\000" +
    "\002\025\003\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\034\003\000\002\034\003\000\002\035\003\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\002\005\000\002\003\004\000\002\003\002\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\011\000\002\012" +
    "\006\000\002\012\002\000\002\006\013\000\002\007\007" +
    "\000\002\010\005\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\005\000\002\011\006\000\002" +
    "\015\003\000\002\016\003\000\002\016\005\000\002\017" +
    "\003\000\002\017\005\000\002\017\005\000\002\020\003" +
    "\000\002\020\005\000\002\021\003\000\002\021\005\000" +
    "\002\022\003\000\002\022\003\000\002\022\005\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\024" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\006\003\005\023\007\001\002\000\004\002" +
    "\152\001\002\000\022\003\uffee\017\uffee\024\uffee\025\uffee" +
    "\030\uffee\032\uffee\033\uffee\034\uffee\001\002\000\022\003" +
    "\uffdf\017\uffdf\024\uffdf\025\uffdf\030\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\001\002\000\022\003\uffef\017\uffef\024\uffef\025" +
    "\uffef\030\uffef\032\uffef\033\uffef\034\uffef\001\002\000\022" +
    "\003\030\017\016\024\015\025\020\030\022\032\027\033" +
    "\012\034\032\001\002\000\024\003\uffde\007\uffde\017\uffde" +
    "\024\uffde\025\uffde\030\uffde\032\uffde\033\uffde\034\uffde\001" +
    "\002\000\004\017\uffd3\001\002\000\024\003\uffda\007\uffda" +
    "\017\uffda\024\uffda\025\uffda\030\uffda\032\uffda\033\uffda\034" +
    "\uffda\001\002\000\024\003\uffdc\007\uffdc\017\uffdc\024\uffdc" +
    "\025\uffdc\030\uffdc\032\uffdc\033\uffdc\034\uffdc\001\002\000" +
    "\004\002\uffed\001\002\000\026\003\uffbe\005\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\026" +
    "\uffbe\001\002\000\024\003\uffdb\007\uffdb\017\uffdb\024\uffdb" +
    "\025\uffdb\030\uffdb\032\uffdb\033\uffdb\034\uffdb\001\002\000" +
    "\016\003\051\004\050\017\016\020\041\021\042\022\047" +
    "\001\002\000\004\017\132\001\002\000\006\003\114\006" +
    "\115\001\002\000\004\002\uffe1\001\002\000\006\003\106" +
    "\013\110\001\002\000\024\003\uffdd\007\uffdd\017\uffdd\024" +
    "\uffdd\025\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\001\002" +
    "\000\024\003\uffe0\007\uffe0\017\uffe0\024\uffe0\025\uffe0\030" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\001\002\000\006\003\033" +
    "\004\034\001\002\000\024\002\uffec\003\uffe4\017\uffe4\024" +
    "\uffe4\025\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\001\002" +
    "\000\024\003\uffe5\007\uffe5\017\uffe5\024\uffe5\025\uffe5\030" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\001\002\000\004\017\uffd2" +
    "\001\002\000\016\003\ufff7\004\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\001\002\000\016\003\ufff8\004\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\001\002\000\016\003\051\004" +
    "\050\017\016\020\041\021\042\022\047\001\002\000\024" +
    "\003\uffc6\005\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\026\uffc6\001\002\000\020\003\uffcd\005\uffcd" +
    "\011\uffcd\014\uffcd\015\064\016\065\026\uffcd\001\002\000" +
    "\024\003\uffc3\005\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\026\uffc3\001\002\000\024\003\uffc1\005" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\026\uffc1\001\002\000\024\003\uffc0\005\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\026\uffc0\001\002" +
    "\000\024\003\uffc4\005\uffc4\010\uffc4\011\uffc4\012\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\026\uffc4\001\002\000\012\003\uffe3" +
    "\005\uffe3\011\uffe3\026\uffe3\001\002\000\006\003\077\005" +
    "\101\001\002\000\022\003\uffcb\005\uffcb\010\071\011\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\026\uffcb\001\002\000\024\003" +
    "\uffbf\005\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\026\uffbf\001\002\000\014\004\050\017\016\020" +
    "\041\021\042\022\047\001\002\000\012\003\uffe2\005\uffe2" +
    "\011\uffe2\026\uffe2\001\002\000\014\003\uffce\005\uffce\011" +
    "\uffce\014\060\026\uffce\001\002\000\024\003\uffc8\005\uffc8" +
    "\010\uffc8\011\uffc8\012\054\014\uffc8\015\uffc8\016\uffc8\026" +
    "\uffc8\001\002\000\016\003\056\004\050\017\016\020\041" +
    "\021\042\022\047\001\002\000\024\003\ufffa\005\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\026\ufffa" +
    "\001\002\000\024\003\ufff9\005\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\026\ufff9\001\002\000\024" +
    "\003\uffc5\005\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\026\uffc5\001\002\000\016\003\062\004\050" +
    "\017\016\020\041\021\042\022\047\001\002\000\020\003" +
    "\000\005\000\011\000\014\000\015\064\016\065\026\000" +
    "\001\002\000\014\003\uffff\005\uffff\011\uffff\014\uffff\026" +
    "\uffff\001\002\000\014\003\uffcc\005\uffcc\011\uffcc\014\uffcc" +
    "\026\uffcc\001\002\000\016\003\070\004\050\017\016\020" +
    "\041\021\042\022\047\001\002\000\016\003\070\004\050" +
    "\017\016\020\041\021\042\022\047\001\002\000\022\003" +
    "\ufffe\005\ufffe\010\071\011\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\026\ufffe\001\002\000\020\003\uffc9\005\uffc9\011\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\026\uffc9\001\002\000\020\003\ufffd" +
    "\005\ufffd\011\ufffd\014\ufffd\015\ufffd\016\ufffd\026\ufffd\001" +
    "\002\000\016\003\072\004\050\017\016\020\041\021\042" +
    "\022\047\001\002\000\022\003\ufffb\005\ufffb\010\ufffb\011" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\026\ufffb\001\002\000\022" +
    "\003\uffc7\005\uffc7\010\uffc7\011\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\026\uffc7\001\002\000\024\003\ufffc\005\ufffc\010\ufffc" +
    "\011\ufffc\012\054\014\ufffc\015\ufffc\016\ufffc\026\ufffc\001" +
    "\002\000\020\003\uffca\005\uffca\011\uffca\014\uffca\015\uffca" +
    "\016\uffca\026\uffca\001\002\000\006\003\077\005\101\001" +
    "\002\000\024\003\ufff5\005\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\026\ufff5\001\002\000\024\003" +
    "\uffc2\005\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\026\uffc2\001\002\000\024\003\ufff6\005\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\026\ufff6" +
    "\001\002\000\006\003\105\011\104\001\002\000\024\003" +
    "\uffd5\007\uffd5\017\uffd5\024\uffd5\025\uffd5\030\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\001\002\000\024\003\ufff1\007\ufff1\017" +
    "\ufff1\024\ufff1\025\ufff1\030\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\001\002\000\024\003\ufff0\007\ufff0\017\ufff0\024\ufff0\025" +
    "\ufff0\030\ufff0\032\ufff0\033\ufff0\034\ufff0\001\002\000\014" +
    "\004\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\001\002\000" +
    "\014\004\050\017\016\020\041\021\042\022\047\001\002" +
    "\000\014\004\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\001" +
    "\002\000\006\003\105\011\104\001\002\000\024\003\uffcf" +
    "\007\uffcf\017\uffcf\024\uffcf\025\uffcf\030\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\001\002\000\022\003\uffdf\007\uffdf\017\uffdf" +
    "\025\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf\001\002\000" +
    "\022\003\ufff3\007\ufff3\017\ufff3\025\ufff3\030\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\001\002\000\022\003\ufff4\007\ufff4\017" +
    "\ufff4\025\ufff4\030\ufff4\032\ufff4\033\ufff4\034\ufff4\001\002" +
    "\000\022\003\120\007\121\017\016\025\020\030\022\032" +
    "\027\033\012\034\032\001\002\000\006\003\123\031\124" +
    "\001\002\000\022\003\uffe4\007\uffe4\017\uffe4\025\uffe4\030" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\001\002\000\030\003\ufff2" +
    "\007\ufff2\017\ufff2\024\ufff2\025\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\001\002\000\006\003\033" +
    "\004\034\001\002\000\006\003\uffe8\004\uffe8\001\002\000" +
    "\006\003\uffe9\004\uffe9\001\002\000\016\003\051\004\050" +
    "\017\016\020\041\021\042\022\047\001\002\000\006\003" +
    "\077\005\101\001\002\000\006\003\105\011\104\001\002" +
    "\000\024\003\uffd6\007\uffd6\017\uffd6\024\uffd6\025\uffd6\030" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\001\002\000\006\003\105" +
    "\011\104\001\002\000\010\003\uffd1\011\uffd1\013\133\001" +
    "\002\000\016\003\051\004\050\017\016\020\041\021\042" +
    "\022\047\001\002\000\006\003\uffd0\011\uffd0\001\002\000" +
    "\024\003\uffd4\007\uffd4\017\uffd4\024\uffd4\025\uffd4\030\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\001\002\000\006\003\140\026" +
    "\137\001\002\000\006\003\uffeb\006\uffeb\001\002\000\006" +
    "\003\uffea\006\uffea\001\002\000\006\003\114\006\115\001" +
    "\002\000\022\003\uffdf\007\uffdf\017\uffdf\025\uffdf\030\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\001\002\000\022\003\120\007" +
    "\121\017\016\025\020\030\022\032\027\033\012\034\032" +
    "\001\002\000\026\003\uffd7\007\uffd7\017\uffd7\024\uffd7\025" +
    "\uffd7\027\145\030\uffd7\032\uffd7\033\uffd7\034\uffd7\001\002" +
    "\000\006\003\114\006\115\001\002\000\024\003\uffd9\007" +
    "\uffd9\017\uffd9\024\uffd9\025\uffd9\030\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\001\002\000\022\003\uffdf\007\uffdf\017\uffdf\025" +
    "\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf\001\002\000\022" +
    "\003\120\007\121\017\016\025\020\030\022\032\027\033" +
    "\012\034\032\001\002\000\024\003\uffd8\007\uffd8\017\uffd8" +
    "\024\uffd8\025\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\006\002\003\032\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\026\004\030\005\010\006\024\007\013\010" +
    "\016\011\012\013\020\024\023\033\022\037\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\015\043\016\051\017\036\020\045\021" +
    "\052\022\035\023\037\024\042\040\135\001\001\000\004" +
    "\014\130\001\001\000\004\027\112\001\001\000\002\001" +
    "\001\000\004\036\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\015\043\016\051\017\036\020\045\021" +
    "\052\022\035\023\037\024\042\040\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\075\016\051\017\036\020\045\021\052" +
    "\022\035\023\037\024\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\054\023\037" +
    "\024\042\044\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\017\060\020\045\021\052" +
    "\022\035\023\037\024\042\041\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\065" +
    "\021\052\022\035\023\037\024\042\042\074\001\001\000" +
    "\016\020\065\021\052\022\035\023\037\024\042\042\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\073\022\035\023\037\024\042\043\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\110\016\051\017" +
    "\036\020\045\021\052\022\035\023\037\024\042\001\001" +
    "\000\002\001\001\000\004\031\111\001\001\000\002\001" +
    "\001\000\004\003\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\030\005\010\006\024\007\013\010" +
    "\016\011\012\013\020\024\023\030\116\037\025\001\001" +
    "\000\004\035\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\015\043\016\051\017\036\020\045\021" +
    "\052\022\035\023\037\024\042\040\125\001\001\000\004" +
    "\026\126\001\001\000\004\031\127\001\001\000\002\001" +
    "\001\000\004\031\134\001\001\000\002\001\001\000\024" +
    "\015\043\016\051\017\036\020\045\021\052\022\035\023" +
    "\037\024\042\040\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\141\001\001\000\004\003\142" +
    "\001\001\000\026\004\030\005\010\006\024\007\013\010" +
    "\016\011\012\013\020\024\023\030\143\037\025\001\001" +
    "\000\004\012\145\001\001\000\004\027\146\001\001\000" +
    "\002\001\001\000\004\003\147\001\001\000\026\004\030" +
    "\005\010\006\024\007\013\010\016\011\012\013\020\024" +
    "\023\030\150\037\025\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CupParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CupParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CupParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


    //public CupParser (FakeScanner s, ComplexSymbolFactory sf) { super(sf); this.s = s; }
    private Token newToken(TokenType type, String lexeme, Location loc) {
        return new Token(type, lexeme, loc.getLine(), loc.getColumn());
    }
    public static void errorLog(Location loc, String message) {
        System.err.printf("at %s:%d:%d: %s\n", loc.getUnit(), loc.getLine(), loc.getColumn(), message);
    }
    @Override
    public void report_error(String message, Object info) {
        System.err.printf("cup_parser_error: %s %s\n", message, info);
    }
    @Override
    public void report_fatal_error(String message, Object info) {
        System.err.printf("cup_parser_fatal_error: %s %s\n", message, info);
    }
    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("syntax error:", cur_token);
    }
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        report_fatal_error("syntax error:", cur_token);
    }

    @Override
    protected int error_sync_size() { return 3333; }

    public Statements program = null;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CupParser$actions {
  private final CupParser parser;

  /** Constructor */
  CUP$CupParser$actions(CupParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CupParser$do_action_part00000000(
    int                        CUP$CupParser$act_num,
    java_cup.runtime.lr_parser CUP$CupParser$parser,
    java.util.Stack            CUP$CupParser$stack,
    int                        CUP$CupParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CupParser$result;

      /* select the action based on the action number */
      switch (CUP$CupParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xright;
		Statements start_val = (Statements)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		RESULT = start_val;
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CupParser$parser.done_parsing();
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // RelationalExpression1 ::= RelationalExpression 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("RelationalExpression1",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RelationalExpression1 ::= error 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 CupParser.errorLog(exleft, "expected an expression"); RESULT = new Literal("error was here", new upl.lexer.Location(exleft.getLine(), exleft.getColumn())); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("RelationalExpression1",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // AdditiveExpression1 ::= AdditiveExpression 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression1",32, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // AdditiveExpression1 ::= error 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 CupParser.errorLog(exleft, "expected an expression"); RESULT = new Literal("error was here", new upl.lexer.Location(exleft.getLine(), exleft.getColumn())); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression1",32, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MultiplicativeExpression1 ::= MultiplicativeExpression 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression1",33, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MultiplicativeExpression1 ::= error 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 CupParser.errorLog(exleft, "expected an expression"); RESULT = new Literal("error was here", new upl.lexer.Location(exleft.getLine(), exleft.getColumn())); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression1",33, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PrimaryExpression1 ::= PrimaryExpression 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression1",34, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PrimaryExpression1 ::= error 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 CupParser.errorLog(exleft, "expected an expression"); RESULT = new Literal("error was here", new upl.lexer.Location(exleft.getLine(), exleft.getColumn())); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression1",34, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LEFT_PAREN1 ::= LEFT_PAREN 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("LEFT_PAREN1",19, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LEFT_PAREN1 ::= error 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 System.err.println(String.format("at %s: expected '('\n", exleft)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("LEFT_PAREN1",19, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RIGHT_PAREN1 ::= RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("RIGHT_PAREN1",20, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RIGHT_PAREN1 ::= error 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 System.err.println(String.format("at %s: expected ')'\n", exleft)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("RIGHT_PAREN1",20, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LEFT_BRACE1 ::= LEFT_BRACE 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("LEFT_BRACE1",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LEFT_BRACE1 ::= error 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 System.err.println(String.format("at %s: expected '{'\n", exleft)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("LEFT_BRACE1",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RIGHT_BRACE1 ::= RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("RIGHT_BRACE1",22, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SEMICOLON1 ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("SEMICOLON1",23, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SEMICOLON1 ::= error 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 System.err.println(String.format("at %s: expected ';'\n", exleft)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("SEMICOLON1",23, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BEGIN1 ::= BEGIN 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("BEGIN1",24, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BEGIN1 ::= error 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 System.err.println(String.format("at %s: expected 'begin'\n", exleft)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("BEGIN1",24, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // END1 ::= END 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("END1",25, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // END1 ::= error 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 System.err.println(String.format("at %s: expected 'end'\n", exleft)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("END1",25, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // THEN1 ::= THEN 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("THEN1",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // THEN1 ::= error 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 System.err.println(String.format("at %s: expected 'then'\n", exleft)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("THEN1",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WHILE1 ::= WHILE 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("WHILE1",27, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WHILE1 ::= error 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 System.err.println(String.format("at %s: expected 'while'\n", exleft)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("WHILE1",27, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EQUAL1 ::= EQUAL 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("EQUAL1",28, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EQUAL1 ::= error 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 System.err.println(String.format("at %s: expected '='\n", exleft)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("EQUAL1",28, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement1 ::= Statement 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Statement1",29, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement1 ::= error 
            {
              Statement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 CupParser.errorLog(exleft, "expected a statement"); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Statement1",29, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression1 ::= Expression 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Expression1",30, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression1 ::= error 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 System.err.println(String.format("Expression error\n")); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Expression1",30, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Program ::= BEGIN1 Statements END1 
            {
              Statements RESULT =null;
		Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xleft;
		Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xright;
		Statements statements = (Statements)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 program = statements; /* System.out.println("hello from Cup"); */ 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statements ::= Statements Statement1 
            {
              Statements RESULT =null;
		Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xleft;
		Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xright;
		Statements statements = (Statements)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		Location statementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location statementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 if (statement != null) statements.statements.add(statement);
                                                                                                    RESULT = statements; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Statements",1, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statements ::= 
            {
              Statements RESULT =null;
		 RESULT = new Statements(new ArrayList<>()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Statements",1, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= IfThenElseStatement 
            {
              Statement RESULT =null;
		Location statementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location statementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		IfThenElse statement = (IfThenElse)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = statement; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= DoWhileStatement 
            {
              Statement RESULT =null;
		Location statementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location statementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		DoWhile statement = (DoWhile)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = statement; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= PrintStatement 
            {
              Statement RESULT =null;
		Location statementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location statementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Print statement = (Print)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = statement; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= DeclarationStatement 
            {
              Statement RESULT =null;
		Location statementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location statementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Declaration statement = (Declaration)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = statement; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= AssignmentStatement 
            {
              Statement RESULT =null;
		Location statementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location statementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Assignment statement = (Assignment)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = statement; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IfThenElseStatement ::= IF Expression1 THEN1 LEFT_BRACE1 Statements RIGHT_BRACE1 MaybeElse 
            {
              IfThenElse RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).value;
		Location ifBranchxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xleft;
		Location ifBranchxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xright;
		Statements ifBranch = (Statements)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		Location elseBranchxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location elseBranchxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Statements elseBranch = (Statements)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new IfThenElse(condition, ifBranch, elseBranch); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("IfThenElseStatement",3, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-6)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MaybeElse ::= ELSE LEFT_BRACE1 Statements RIGHT_BRACE1 
            {
              Statements RESULT =null;
		Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xleft;
		Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xright;
		Statements statements = (Statements)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = statements; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("MaybeElse",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MaybeElse ::= 
            {
              Statements RESULT =null;
		 RESULT = null; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("MaybeElse",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DoWhileStatement ::= DO LEFT_BRACE1 Statements RIGHT_BRACE1 WHILE1 LEFT_PAREN1 Expression1 RIGHT_PAREN1 SEMICOLON1 
            {
              DoWhile RESULT =null;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-6)).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-6)).xright;
		Statements body = (Statements)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-6)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		 RESULT = new DoWhile(body, expression); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("DoWhileStatement",4, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-8)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PrintStatement ::= PRINT LEFT_PAREN1 Expression1 RIGHT_PAREN1 SEMICOLON1 
            {
              Print RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		 RESULT = new Print(expression); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("PrintStatement",5, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DeclarationStatement ::= TypeSpecifier InitDeclarator SEMICOLON1 
            {
              Declaration RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xright;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		Location declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xleft;
		Location declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xright;
		Entry<Token,Expression> decl = (Entry<Token,Expression>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = new Declaration(new Variable(type, decl.getKey()), decl.getValue()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("DeclarationStatement",6, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TypeSpecifier ::= INT 
            {
              Token RESULT =null;
		Location lexemexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location lexemexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object lexeme = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = newToken(TokenType.INT, "int", lexemexleft); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",9, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TypeSpecifier ::= BOOL 
            {
              Token RESULT =null;
		Location lexemexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location lexemexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object lexeme = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = newToken(TokenType.BOOL, "bool", lexemexleft); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",9, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InitDeclarator ::= IDENTIFIER 
            {
              Entry<Token,Expression> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new SimpleEntry<>(newToken(TokenType.IDENTIFIER, id, idxleft), null); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("InitDeclarator",10, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InitDeclarator ::= IDENTIFIER EQUAL Expression1 
            {
              Entry<Token,Expression> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new SimpleEntry<>(newToken(TokenType.IDENTIFIER, id, idxleft), expression); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("InitDeclarator",10, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AssignmentStatement ::= Identifier EQUAL1 Expression SEMICOLON1 
            {
              Assignment RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).xright;
		Variable id = (Variable)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = new Assignment(id, expression); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",7, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= EqualityExpression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = expression; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EqualityExpression ::= RelationalExpression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = expression; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",12, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EqualityExpression ::= EqualityExpression EQUAL_EQUAL RelationalExpression1 
            {
              Expression RESULT =null;
		Location leftxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xleft;
		Location leftxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xright;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xright;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		Location rightxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location rightxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, newToken(TokenType.EQUAL_EQUAL, "==", operatorxleft) , right); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",12, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RelationalExpression ::= AdditiveExpression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = expression; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",13, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RelationalExpression ::= RelationalExpression GREATER AdditiveExpression1 
            {
              Expression RESULT =null;
		Location leftxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xleft;
		Location leftxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xright;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xright;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		Location rightxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location rightxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, newToken(TokenType.GREATER, ">", operatorxleft) , right); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",13, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RelationalExpression ::= RelationalExpression GREATER_EQUAL AdditiveExpression1 
            {
              Expression RESULT =null;
		Location leftxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xleft;
		Location leftxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xright;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xright;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		Location rightxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location rightxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, newToken(TokenType.GREATER_EQUAL, ">=", operatorxleft) , right); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",13, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AdditiveExpression ::= MultiplicativeExpression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = expression; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",14, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression1 
            {
              Expression RESULT =null;
		Location leftxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xleft;
		Location leftxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xright;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xright;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		Location rightxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location rightxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, newToken(TokenType.PLUS, "+", operatorxleft) , right); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",14, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MultiplicativeExpression ::= PrimaryExpression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = expression; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",15, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MultiplicativeExpression ::= MultiplicativeExpression STAR PrimaryExpression1 
            {
              Expression RESULT =null;
		Location leftxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xleft;
		Location leftxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).xright;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		Location operatorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xleft;
		Location operatorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xright;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		Location rightxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location rightxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, newToken(TokenType.STAR, "*", operatorxleft) , right); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",15, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PrimaryExpression ::= Identifier 
            {
              Expression RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Variable id = (Variable)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = id; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",16, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PrimaryExpression ::= Literal 
            {
              Expression RESULT =null;
		Location literalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location literalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Literal literal = (Literal)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = literal; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",16, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PrimaryExpression ::= LEFT_PAREN Expression RIGHT_PAREN1 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = new Grouping(expression); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",16, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Literal ::= NUMBER 
            {
              Literal RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new Literal(num, new upl.lexer.Location(numxleft.getLine(), numxleft.getColumn())); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Literal",17, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Literal ::= TRUE 
            {
              Literal RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new Literal(true, new upl.lexer.Location(txleft.getLine(), txleft.getColumn())); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Literal",17, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Literal ::= FALSE 
            {
              Literal RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new Literal(false, new upl.lexer.Location(fxleft.getLine(), fxleft.getColumn())); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Literal",17, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Identifier ::= IDENTIFIER 
            {
              Variable RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CupParser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new Variable(newToken(TokenType.IDENTIFIER, CupParserWrapper.magicKeyword, idxleft), newToken(TokenType.IDENTIFIER, id, idxleft)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("Identifier",18, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CupParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CupParser$do_action(
    int                        CUP$CupParser$act_num,
    java_cup.runtime.lr_parser CUP$CupParser$parser,
    java.util.Stack            CUP$CupParser$stack,
    int                        CUP$CupParser$top)
    throws java.lang.Exception
    {
              return CUP$CupParser$do_action_part00000000(
                               CUP$CupParser$act_num,
                               CUP$CupParser$parser,
                               CUP$CupParser$stack,
                               CUP$CupParser$top);
    }
}

}
